import { Subject } from 'rxjs/Subject';
import { ControlValueAccessor } from '@angular/forms';
import { OnDestroy, OnChanges, AfterViewInit, ChangeDetectorRef, EventEmitter, TemplateRef, ElementRef, SimpleChanges, QueryList, InjectionToken } from '@angular/core';
import { NgOption, NgSelectConfig } from './ng-select.types';
import { ItemsList } from './items-list';
import { NgOptionComponent } from './ng-option.component';
import { NgDropdownPanelComponent } from './ng-dropdown-panel.component';
import { ConsoleService } from './console.service';
export declare const NG_SELECT_DEFAULT_CONFIG: InjectionToken<NgSelectConfig>;
export declare type DropdownPosition = 'bottom' | 'top' | 'auto';
export declare type AddTagFn = ((term: string) => any | Promise<any>);
export declare class NgSelectComponent implements OnDestroy, OnChanges, AfterViewInit, ControlValueAccessor {
    private _cd;
    private _console;
    elementRef: ElementRef;
    items: any[];
    bindLabel: string;
    bindValue: string;
    clearable: boolean;
    markFirst: boolean;
    placeholder: string;
    notFoundText: string;
    typeToSearchText: string;
    addTagText: string;
    loadingText: string;
    clearAllText: string;
    dropdownPosition: DropdownPosition;
    appendTo: string;
    loading: boolean;
    closeOnSelect: boolean;
    hideSelected: boolean;
    maxSelectedItems: number;
    groupBy: string;
    bufferAmount: number;
    virtualScroll: boolean;
    selectableGroup: boolean;
    typeahead: Subject<string>;
    multiple: boolean;
    addTag: boolean | AddTagFn;
    searchable: boolean;
    blurEvent: EventEmitter<{}>;
    focusEvent: EventEmitter<{}>;
    changeEvent: EventEmitter<{}>;
    openEvent: EventEmitter<{}>;
    closeEvent: EventEmitter<{}>;
    searchEvent: EventEmitter<{}>;
    clearEvent: EventEmitter<{}>;
    addEvent: EventEmitter<{}>;
    removeEvent: EventEmitter<{}>;
    scrollToEnd: EventEmitter<{
        start: number;
        end: number;
    }>;
    optionTemplate: TemplateRef<any>;
    optgroupTemplate: TemplateRef<any>;
    labelTemplate: TemplateRef<any>;
    multiLabelTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    notFoundTemplate: TemplateRef<any>;
    typeToSearchTemplate: TemplateRef<any>;
    loadingTextTemplate: TemplateRef<any>;
    dropdownPanel: NgDropdownPanelComponent;
    ngOptions: QueryList<NgOptionComponent>;
    filterInput: ElementRef;
    isOpen: boolean;
    isFocused: boolean;
    isDisabled: boolean;
    readonly filtered: boolean;
    itemsList: ItemsList;
    viewPortItems: NgOption[];
    filterValue: string;
    currentDropdownPosition: DropdownPosition;
    private _defaultLabel;
    private _defaultValue;
    private _typeaheadLoading;
    private _primitive;
    private readonly _destroy$;
    private _onChange;
    private _onTouched;
    clearItem: (item: any) => void;
    constructor(config: NgSelectConfig, _cd: ChangeDetectorRef, _console: ConsoleService, elementRef: ElementRef);
    readonly selectedItems: NgOption[];
    readonly selectedValues: (string | Object)[];
    readonly isLoading: boolean;
    readonly hasValue: boolean;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    handleKeyDown($event: KeyboardEvent): void;
    handleArrowClick($event: Event): void;
    handleClearClick($event: Event): void;
    clearModel(): void;
    writeValue(value: any | any[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    toggle(): void;
    open(): void;
    close(): void;
    toggleItem(item: NgOption): void;
    select(item: NgOption): void;
    unselect(item: NgOption): void;
    selectTag(): void;
    showClear(): boolean;
    showAddTag(): boolean;
    showFilter(): boolean;
    showNoItemsFound(): boolean;
    showTypeToSearch(): boolean;
    filter(term: string): void;
    onInputFocus(): void;
    onInputBlur(): void;
    onItemHover(item: NgOption): void;
    detectChanges(): void;
    focusSearchInput(): void;
    private _setItems(items);
    private _setItemsFromNgOptions();
    private _isValidWriteValue(value);
    private _handleWriteValue(ngModel);
    private _updateNgModel();
    private _clearSearch();
    private _scrollToMarked();
    private _scrollToTag();
    private _handleTab(_);
    private _handleEnter($event);
    private _handleSpace($event);
    private _handleArrowDown($event);
    private _handleArrowUp($event);
    private nextItemIsTag(nextStep);
    private _handleBackspace();
    private readonly _isTypeahead;
    private _mergeGlobalConfig(config);
}
